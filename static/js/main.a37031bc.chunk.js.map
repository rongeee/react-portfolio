{"version":3,"sources":["style/theme.jsx","style/global.jsx","contexts/PortfolioContext.jsx","components/ThemeSwitcher.jsx","components/Header.jsx","components/Layout.jsx","components/Hero.jsx","App.js","serviceWorker.js","index.js"],"names":["lightTheme","body","text","toggleBorder","gradient","darkTheme","bodyDarker","GlobalStyles","createGlobalStyle","theme","PortfolioContext","createContext","PortfolioProvider","children","useState","dTheme","setDTheme","Provider","value","ThemeSwitcher","setTheme","useContext","currTheme","themeColors","ThemeContext","console","log","Root","checked","className","offColor","onColor","onHandleColor","offHandleColor","height","width","checkedIcon","style","display","justifyContent","alignItems","fontSize","marginLeft","color","uncheckedIcon","position","right","onChange","prevState","styled","div","Header","Container","header","props","Layout","button","Hero","NameContainer","HeadLine","SocialContainer","WorkLink","section","h2","p","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a37031bc.chunk.js","sourcesContent":["export const lightTheme = {\r\n  body: \"#E2E2E2\",\r\n  text: \"#363537\",\r\n  toggleBorder: \"#FFF\",\r\n  gradient: \"linear-gradient(#39598A, #79D7ED)\",\r\n};\r\n\r\nexport const darkTheme = {\r\n  body: \"#363537\",\r\n  bodyDarker: \"#232323\",\r\n  text: \"#FAFAFA\",\r\n  toggleBorder: \"#6B8096\",\r\n  gradient: \"linear-gradient(#091236, #1E215D)\",\r\n};\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n\r\n  *,\r\n  *::after,\r\n  *::before {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\r\n    transition: all 0.25s linear;\r\n  }\r\n  `;\r\n","import React, { createContext, useState } from \"react\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { lightTheme, darkTheme } from \"../style/theme\";\r\nimport { GlobalStyles } from \"../style/global\";\r\nexport const PortfolioContext = createContext();\r\n\r\nconst PortfolioProvider = ({ children }) => {\r\n  const [dTheme, setDTheme] = useState(true);\r\n\r\n  return (\r\n    <PortfolioContext.Provider value={{ dTheme, setDTheme }}>\r\n      <ThemeProvider theme={dTheme ? darkTheme : lightTheme}>\r\n        <GlobalStyles />\r\n        {children}\r\n      </ThemeProvider>\r\n    </PortfolioContext.Provider>\r\n  );\r\n};\r\n\r\nexport default PortfolioProvider;\r\n","import React, { useContext } from \"react\";\r\nimport styled, { ThemeContext } from \"styled-components\";\r\nimport { PortfolioContext } from \"../contexts/PortfolioContext\";\r\nimport Switch from \"react-switch\";\r\nimport { IoMdMoon, IoIosSunny } from \"react-icons/io\";\r\n\r\nconst ThemeSwitcher = () => {\r\n  const setTheme = useContext(PortfolioContext).setDTheme;\r\n  const currTheme = useContext(PortfolioContext).dTheme;\r\n  const themeColors = useContext(ThemeContext);\r\n  console.log(themeColors);\r\n\r\n  return (\r\n    <Root>\r\n      <Switch\r\n        checked={currTheme ? true : false}\r\n        className=\"test\"\r\n        offColor={themeColors.text}\r\n        onColor={themeColors.text}\r\n        onHandleColor={themeColors.body}\r\n        offHandleColor={themeColors.body}\r\n        height={20}\r\n        width={60}\r\n        checkedIcon={\r\n          <IoIosSunny\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              height: \"100%\",\r\n              fontSize: 15,\r\n              marginLeft: -20,\r\n            }}\r\n            color={themeColors.text}\r\n            className=\"white\"\r\n          />\r\n        }\r\n        uncheckedIcon={\r\n          <IoMdMoon\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              position: \"absolute\",\r\n              height: \"100%\",\r\n              fontSize: 30,\r\n              right: -27,\r\n            }}\r\n            color={themeColors.text}\r\n            className=\"dark\"\r\n          />\r\n        }\r\n        onChange={() => {\r\n          setTheme((prevState) => !prevState);\r\n        }}\r\n      />\r\n    </Root>\r\n  );\r\n};\r\n\r\nexport default ThemeSwitcher;\r\n\r\nconst Root = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-right: 50px;\r\n  .custom-classname .react-toggle--checked .react-toggle-track {\r\n    background-color: red;\r\n    height: 200px;\r\n    width: 200px;\r\n    padding: 30px;\r\n  }\r\n`;\r\n","import React, { useContext } from \"react\";\r\nimport styled, { ThemeContext } from \"styled-components\";\r\nimport { PortfolioContext } from \"../contexts/PortfolioContext\";\r\nimport ThemeSwitcher from \"./ThemeSwitcher\";\r\nexport const Header = () => {\r\n  const setTheme = useContext(PortfolioContext).setDTheme;\r\n\r\n  return (\r\n    <Container>\r\n      <ThemeSwitcher />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.header`\r\n  width: 100%;\r\n  margin: 0;\r\n  padding: 1em 2em;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-direction: row-reverse;\r\n  background: ${(props) => props.theme.bodyDarker};\r\n  position: fixed;\r\n  top: 0;\r\n`;\r\n\r\n// const HomeLink = styled.h2`\r\n//   cursor: pointer;\r\n// `;\r\n\r\nconst ToggleThemeBtn = styled.button`\r\n  background: black;\r\n  border: none;\r\n  color: ${(props) => props.theme.text};\r\n  background: ${(props) => props.theme.body};\r\n  cursor: pointer;\r\n`;\r\n","import React from \"react\";\r\nimport { Header } from \"./Header\";\r\n\r\nexport const Layout = ({ children }) => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <main>{children}</main>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { RiLinkedinBoxLine, RiGithubFill } from \"react-icons/ri\";\r\n\r\nexport const Hero = () => {\r\n  return (\r\n    <Container>\r\n      <NameContainer theme>\r\n        <HeadLine>Patric Ronge</HeadLine>\r\n        <p>Friendly Dev lmao</p>\r\n      </NameContainer>\r\n      <SocialContainer>\r\n        <span>\r\n          <RiGithubFill />\r\n        </span>\r\n        <span>\r\n          <RiLinkedinBoxLine />\r\n        </span>\r\n      </SocialContainer>\r\n      <WorkLink>V See my work below. V</WorkLink>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst Container = styled.section`\r\n  height: 100vh;\r\n  display: grid;\r\n  grid-template-rows: 1fr 0.5fr 1fr;\r\n  justify-items: center;\r\n\r\n  /* justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column; */\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst NameContainer = styled.div`\r\n  grid-row: 2;\r\n  min-width: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid ${(props) => props.theme.toggleBorder};\r\n  justify-content: center;\r\n  padding: 2em;\r\n  p {\r\n    align-self: flex-start;\r\n    margin: 0;\r\n  }\r\n  span {\r\n    font-size: 2rem;\r\n  }\r\n`;\r\n\r\nconst SocialContainer = styled.div`\r\n  display: flex;\r\n  grid-row: 3;\r\n  justify-self: center;\r\n  align-self: center;\r\n  justify-content: center;\r\n  font-size: 4rem;\r\n\r\n  span {\r\n    transition: 200ms;\r\n    &:hover {\r\n      color: ${(props) => props.theme.toggleBorder};\r\n    }\r\n  }\r\n`;\r\n\r\nconst HeadLine = styled.h2`\r\n  font-size: 3rem;\r\n  margin: 0;\r\n`;\r\n\r\nconst WorkLink = styled.p`\r\n  position: absolute;\r\n  bottom: 0;\r\n  cursor: pointer;\r\n`;\r\n","import React from \"react\";\nimport { Layout } from \"./components/Layout\";\nimport { Hero } from \"./components/Hero\";\n\nfunction App() {\n  return (\n    <Layout>\n      <Hero />\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport PortfolioProvider from \"./contexts/PortfolioContext\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PortfolioProvider>\n      <App />\n    </PortfolioProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}